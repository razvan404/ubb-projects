// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/OnwardTravel.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace OnwardTravel.Server {
  public static partial class OnwardService
  {
    static readonly string __ServiceName = "OnwardService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.LoginRequest> __Marshaller_LoginRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.LoginRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.LoginResponse> __Marshaller_LoginResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.LoginResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.LogoutRequest> __Marshaller_LogoutRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.LogoutRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.EmptyResponse> __Marshaller_EmptyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.EmptyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.FindRidesRequest> __Marshaller_FindRidesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.FindRidesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.FindRidesResponse> __Marshaller_FindRidesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.FindRidesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.FindEmptySeatsOnRideRequest> __Marshaller_FindEmptySeatsOnRideRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.FindEmptySeatsOnRideRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.FindEmptySeatsOnRideResponse> __Marshaller_FindEmptySeatsOnRideResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.FindEmptySeatsOnRideResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.FindRidesByDestinationAndDepartureRequest> __Marshaller_FindRidesByDestinationAndDepartureRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.FindRidesByDestinationAndDepartureRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.FindRidesByDestinationAndDepartureResponse> __Marshaller_FindRidesByDestinationAndDepartureResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.FindRidesByDestinationAndDepartureResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.FindReservationsByRideRequest> __Marshaller_FindReservationsByRideRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.FindReservationsByRideRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.FindReservationsByRideResponse> __Marshaller_FindReservationsByRideResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.FindReservationsByRideResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OnwardTravel.Server.CreateReservationRequest> __Marshaller_CreateReservationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OnwardTravel.Server.CreateReservationRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OnwardTravel.Server.LoginRequest, global::OnwardTravel.Server.LoginResponse> __Method_login = new grpc::Method<global::OnwardTravel.Server.LoginRequest, global::OnwardTravel.Server.LoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "login",
        __Marshaller_LoginRequest,
        __Marshaller_LoginResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OnwardTravel.Server.LogoutRequest, global::OnwardTravel.Server.EmptyResponse> __Method_logout = new grpc::Method<global::OnwardTravel.Server.LogoutRequest, global::OnwardTravel.Server.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "logout",
        __Marshaller_LogoutRequest,
        __Marshaller_EmptyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OnwardTravel.Server.FindRidesRequest, global::OnwardTravel.Server.FindRidesResponse> __Method_findAllRides = new grpc::Method<global::OnwardTravel.Server.FindRidesRequest, global::OnwardTravel.Server.FindRidesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "findAllRides",
        __Marshaller_FindRidesRequest,
        __Marshaller_FindRidesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OnwardTravel.Server.FindEmptySeatsOnRideRequest, global::OnwardTravel.Server.FindEmptySeatsOnRideResponse> __Method_findEmptySeatsOnRide = new grpc::Method<global::OnwardTravel.Server.FindEmptySeatsOnRideRequest, global::OnwardTravel.Server.FindEmptySeatsOnRideResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "findEmptySeatsOnRide",
        __Marshaller_FindEmptySeatsOnRideRequest,
        __Marshaller_FindEmptySeatsOnRideResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OnwardTravel.Server.FindRidesByDestinationAndDepartureRequest, global::OnwardTravel.Server.FindRidesByDestinationAndDepartureResponse> __Method_findRidesByDestinationAndDeparture = new grpc::Method<global::OnwardTravel.Server.FindRidesByDestinationAndDepartureRequest, global::OnwardTravel.Server.FindRidesByDestinationAndDepartureResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "findRidesByDestinationAndDeparture",
        __Marshaller_FindRidesByDestinationAndDepartureRequest,
        __Marshaller_FindRidesByDestinationAndDepartureResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OnwardTravel.Server.FindReservationsByRideRequest, global::OnwardTravel.Server.FindReservationsByRideResponse> __Method_findReservationsByRide = new grpc::Method<global::OnwardTravel.Server.FindReservationsByRideRequest, global::OnwardTravel.Server.FindReservationsByRideResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "findReservationsByRide",
        __Marshaller_FindReservationsByRideRequest,
        __Marshaller_FindReservationsByRideResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OnwardTravel.Server.CreateReservationRequest, global::OnwardTravel.Server.EmptyResponse> __Method_createReservation = new grpc::Method<global::OnwardTravel.Server.CreateReservationRequest, global::OnwardTravel.Server.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createReservation",
        __Marshaller_CreateReservationRequest,
        __Marshaller_EmptyResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::OnwardTravel.Server.OnwardTravelReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OnwardService</summary>
    [grpc::BindServiceMethod(typeof(OnwardService), "BindService")]
    public abstract partial class OnwardServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::OnwardTravel.Server.LoginResponse> login(global::OnwardTravel.Server.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::OnwardTravel.Server.EmptyResponse> logout(global::OnwardTravel.Server.LogoutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::OnwardTravel.Server.FindRidesResponse> findAllRides(global::OnwardTravel.Server.FindRidesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::OnwardTravel.Server.FindEmptySeatsOnRideResponse> findEmptySeatsOnRide(global::OnwardTravel.Server.FindEmptySeatsOnRideRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::OnwardTravel.Server.FindRidesByDestinationAndDepartureResponse> findRidesByDestinationAndDeparture(global::OnwardTravel.Server.FindRidesByDestinationAndDepartureRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::OnwardTravel.Server.FindReservationsByRideResponse> findReservationsByRide(global::OnwardTravel.Server.FindReservationsByRideRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::OnwardTravel.Server.EmptyResponse> createReservation(global::OnwardTravel.Server.CreateReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OnwardService</summary>
    public partial class OnwardServiceClient : grpc::ClientBase<OnwardServiceClient>
    {
      /// <summary>Creates a new client for OnwardService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OnwardServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OnwardService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OnwardServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OnwardServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OnwardServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.LoginResponse login(global::OnwardTravel.Server.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.LoginResponse login(global::OnwardTravel.Server.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_login, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.LoginResponse> loginAsync(global::OnwardTravel.Server.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return loginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.LoginResponse> loginAsync(global::OnwardTravel.Server.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_login, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.EmptyResponse logout(global::OnwardTravel.Server.LogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.EmptyResponse logout(global::OnwardTravel.Server.LogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_logout, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.EmptyResponse> logoutAsync(global::OnwardTravel.Server.LogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.EmptyResponse> logoutAsync(global::OnwardTravel.Server.LogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_logout, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.FindRidesResponse findAllRides(global::OnwardTravel.Server.FindRidesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findAllRides(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.FindRidesResponse findAllRides(global::OnwardTravel.Server.FindRidesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_findAllRides, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.FindRidesResponse> findAllRidesAsync(global::OnwardTravel.Server.FindRidesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findAllRidesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.FindRidesResponse> findAllRidesAsync(global::OnwardTravel.Server.FindRidesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_findAllRides, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.FindEmptySeatsOnRideResponse findEmptySeatsOnRide(global::OnwardTravel.Server.FindEmptySeatsOnRideRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findEmptySeatsOnRide(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.FindEmptySeatsOnRideResponse findEmptySeatsOnRide(global::OnwardTravel.Server.FindEmptySeatsOnRideRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_findEmptySeatsOnRide, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.FindEmptySeatsOnRideResponse> findEmptySeatsOnRideAsync(global::OnwardTravel.Server.FindEmptySeatsOnRideRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findEmptySeatsOnRideAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.FindEmptySeatsOnRideResponse> findEmptySeatsOnRideAsync(global::OnwardTravel.Server.FindEmptySeatsOnRideRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_findEmptySeatsOnRide, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.FindRidesByDestinationAndDepartureResponse findRidesByDestinationAndDeparture(global::OnwardTravel.Server.FindRidesByDestinationAndDepartureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findRidesByDestinationAndDeparture(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.FindRidesByDestinationAndDepartureResponse findRidesByDestinationAndDeparture(global::OnwardTravel.Server.FindRidesByDestinationAndDepartureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_findRidesByDestinationAndDeparture, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.FindRidesByDestinationAndDepartureResponse> findRidesByDestinationAndDepartureAsync(global::OnwardTravel.Server.FindRidesByDestinationAndDepartureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findRidesByDestinationAndDepartureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.FindRidesByDestinationAndDepartureResponse> findRidesByDestinationAndDepartureAsync(global::OnwardTravel.Server.FindRidesByDestinationAndDepartureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_findRidesByDestinationAndDeparture, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.FindReservationsByRideResponse findReservationsByRide(global::OnwardTravel.Server.FindReservationsByRideRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findReservationsByRide(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.FindReservationsByRideResponse findReservationsByRide(global::OnwardTravel.Server.FindReservationsByRideRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_findReservationsByRide, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.FindReservationsByRideResponse> findReservationsByRideAsync(global::OnwardTravel.Server.FindReservationsByRideRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findReservationsByRideAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.FindReservationsByRideResponse> findReservationsByRideAsync(global::OnwardTravel.Server.FindReservationsByRideRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_findReservationsByRide, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.EmptyResponse createReservation(global::OnwardTravel.Server.CreateReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createReservation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OnwardTravel.Server.EmptyResponse createReservation(global::OnwardTravel.Server.CreateReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createReservation, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.EmptyResponse> createReservationAsync(global::OnwardTravel.Server.CreateReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createReservationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OnwardTravel.Server.EmptyResponse> createReservationAsync(global::OnwardTravel.Server.CreateReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createReservation, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override OnwardServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OnwardServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(OnwardServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_login, serviceImpl.login)
          .AddMethod(__Method_logout, serviceImpl.logout)
          .AddMethod(__Method_findAllRides, serviceImpl.findAllRides)
          .AddMethod(__Method_findEmptySeatsOnRide, serviceImpl.findEmptySeatsOnRide)
          .AddMethod(__Method_findRidesByDestinationAndDeparture, serviceImpl.findRidesByDestinationAndDeparture)
          .AddMethod(__Method_findReservationsByRide, serviceImpl.findReservationsByRide)
          .AddMethod(__Method_createReservation, serviceImpl.createReservation).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, OnwardServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OnwardTravel.Server.LoginRequest, global::OnwardTravel.Server.LoginResponse>(serviceImpl.login));
      serviceBinder.AddMethod(__Method_logout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OnwardTravel.Server.LogoutRequest, global::OnwardTravel.Server.EmptyResponse>(serviceImpl.logout));
      serviceBinder.AddMethod(__Method_findAllRides, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OnwardTravel.Server.FindRidesRequest, global::OnwardTravel.Server.FindRidesResponse>(serviceImpl.findAllRides));
      serviceBinder.AddMethod(__Method_findEmptySeatsOnRide, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OnwardTravel.Server.FindEmptySeatsOnRideRequest, global::OnwardTravel.Server.FindEmptySeatsOnRideResponse>(serviceImpl.findEmptySeatsOnRide));
      serviceBinder.AddMethod(__Method_findRidesByDestinationAndDeparture, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OnwardTravel.Server.FindRidesByDestinationAndDepartureRequest, global::OnwardTravel.Server.FindRidesByDestinationAndDepartureResponse>(serviceImpl.findRidesByDestinationAndDeparture));
      serviceBinder.AddMethod(__Method_findReservationsByRide, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OnwardTravel.Server.FindReservationsByRideRequest, global::OnwardTravel.Server.FindReservationsByRideResponse>(serviceImpl.findReservationsByRide));
      serviceBinder.AddMethod(__Method_createReservation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OnwardTravel.Server.CreateReservationRequest, global::OnwardTravel.Server.EmptyResponse>(serviceImpl.createReservation));
    }

  }
}
#endregion
